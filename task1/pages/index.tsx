import type { NextPage } from 'next'
import { useState, useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import UserRec from '../components/UserRec'
import { AsyncLocalStorage } from 'async_hooks'

interface Users {
  key: string;
  id: number;
  text1: string;
  text2: string;
}

const Users: NextPage = () => {

  const zUserList: string = 'UserList';//назва в LocalStorage для списку користувачів
  const namez = useFormInput('', 'name');
  const surnamez = useFormInput('', 'surname');
  //const xxx: string = (localStorage.getItem('test1') null ? '' : localStorage.getItem('test1'));
  const startVal: Users = readFromLocalStorage(zUserList);
  const [userz, setUserz] = useState<Users>(
    startVal
    //{key:'123', id: "1", text1: "", text2: "" } //вилучаємо для продакшина, потрібна лише для розробки
    //localStorage.getItem('qwerty')
    //JSON.parse(xxx)
  );
  const [userEditMode, setUserEditMode] = useState(-1
    //{key: id: text1 text2}
  );

  //let users: Array<{ name: string, surname: string }> = [];// { name: string, surname: string };
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const handle1 = () => { saveToLocalStorage(zUserList, userz); }
      window.addEventListener('unload', handle1); //остальні події https://www.w3schools.com/jsref/dom_obj_event.asp
      return () => {
        window.removeEventListener;
      }
      //saveToLocalStorage(zUserList, userz);//нада тількі налаштуватись на правильну подію в коді вище, незнаю точно на яку
    }

  });


  function saveToLocalStorage(storageName: string, storageValue: any) {
    if (typeof window !== 'undefined') {//якщо це сторона КЛІЄНТА
      console.log('SAVE to ' + storageName + ' STORAGE = ' + storageValue?.length);
      localStorage.setItem(storageName, JSON.stringify(storageValue));
    } else {
      //console.log('NOT SAVE ' + storageName + ' STORAGE');
    }
  }

  function readFromLocalStorage(storageName: string) {
    if (typeof window == 'undefined') {
      //console.log('NOT READ ' + storageName + ' STORAGE');
      return [];
    } else {
      let xxx: any = localStorage.getItem(storageName);

      if (typeof xxx === 'string') {
        let rez: any = JSON.parse(xxx);
        console.log('READ ' + storageName + ' STORAGE =' + rez?.length);
        return rez;

      } else {
        return [];
      }
    }
  }

  function useFormInput(defVal: string, selfVal: string) {
    let self1: string = selfVal;
    const [value, setValue] = useState(defVal);
    function handleChange(e: any) {
      setValue(e.target.value);
      // localStorage.getItem('qwerty')
      //localStorage.setItem(self, value);
    }
    return {
      value,
      onChange: handleChange,
      onsetvalue: setValue //запишемо в зовнішню змінну щоб потім викликати якщо потрібно
    };
  }

  function setEdit(name: string, surname: string, id: number) {
    namez.onsetvalue(name);
    surnamez.onsetvalue(surname);
    setUserEditMode(id);
  }

  function userDel(idz: string) {
    function filterArr(p: any, idx: any, arr: any): boolean {
      const rez: boolean = (p.id !== idz);
      if (idz > idx) { p.id = idx + 1 } else { p.id = idx }
      if ((!rez) && (userEditMode === idx + 1)) { setEdit('', '', -1); }//якщо видалили редагуємий елемент
      return rez;
    }
    //setUserz(userz.filter(p => p.id !== idz))//work ok
    setUserz(userz.filter(filterArr));
  }



  function userEdit(idz: string) {
    function filterArr(p: any, idx: any, arr: any): boolean {
      //const rez: boolean = (p.id !== idz);
      if (idz == idx + 1) {
        setEdit(p.text1, p.text2, p.id);
      }
      return true;
    }

    if (userEditMode >= 0) {
      //дія з попереднім редагуємим: не потрібно нічого робити, просто відміняємо
    }

    userz.filter(filterArr);
  }



  function userAdd() {
    function filterArr(p: any, idx: any, arr: any): boolean {
      if (userEditMode === idx + 1) {
        p.text1 = namez.value;
        p.text2 = surnamez.value;
      }
      return true;
    }

    if (userEditMode >= 0) {
      //дія з  редагуємим 
      setUserz(userz.filter(filterArr));
      setEdit('', '', -1);//empty edit
    } else {
      setUserz([...userz, { key: userz.length.toString() + '.' + Date.now().toString(), id: userz.length + 1, text1: namez.value, text2: surnamez.value }]);
      //let z = users.push({ name: namez.value, surname: surnamez.value });
      //console.log('userAdd: name=' + namez.value + ', surname=' + surnamez.value + ', len=' + z);
    }
    //saveToLocalStorage(zUserList, userz);

  }

  //useEffect(() => {    console.log(users)  })

  return (
    <div className={styles.container}>
      <Head>
        <title>Users</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.grid}>
          <div className={styles.card}>
            <p className={styles.description}><label htmlFor={`fname`}>{`Ім'я`}</label> <br /><input type={'text'} id={`fname`} name={`fname`} {...namez} /></p>
          </div>
          <div className={styles.card}>
            <p className={styles.description}><label htmlFor={'lname'}> {`Прізвище`}</label><br /> <input type={'text'} id={'lname'} name={'lname'} {...surnamez} /></p>
          </div>
          <div className={styles.card}>

            <p className={styles.description}><button onClick={userAdd}>{userEditMode == -1 ? 'Додати' : 'Зберегти'}</button> </p>
          </div>
        </div>


        <div className={styles.main2} >
          {userz.map(itemz =>
            <UserRec key={itemz.key} id={itemz.id} text1={itemz.text1} text2={itemz.text2} userDel={userDel} userEdit={userEdit}></UserRec>
          )}

        </div>
      </main >

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/490-crocodile.svg" alt="Crocodile Logo" width={72} height={72} />
          </span>
        </a>
      </footer>
    </div >
  )
}


export default Users
